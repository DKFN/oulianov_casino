{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","Speed/Speedometer.tsx","Decompte/DecompteValue.tsx","Counter/Counter.tsx","CheckPoints/CheckpointPassed.tsx","Win/Win.tsx","Position/Position.tsx","App.tsx","index.tsx"],"names":["wrapAction","fn","store","dispatch","notifySpeed","createAction","notifyDecompte","notifyTime","notifyPosition","playerFinished","passCheckpoint","hideCheckpoint","clearFinishTime","window","NotifySpeed","NotifyDecompte","NotifyTime","PlayerFinished","PlayerPassedCheckpoint","HideCheckPoint","ClearFinishTime","NotifyPosition","counterReducer","createReducer","speed","decompte","time","total","position","checkpointInfos","all","type","state","action","Math","abs","Number","parseFloat","payload","parseInt","win","undefined","data","JSON","parse","pos","last","nb","visible","id","place","configureStore","reducer","Speedometer","playerSpeed","useSelector","appState","rotationFromSpeed","console","log","className","style","transform","Decompte","decompteValue","format","n","Counter","counterValue","seconds","minutes","floor","secondsLeft","msLeft","CheckpointPassed","checkpointData","Win","winData","Position","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import {store} from \"./redux/store\";\nimport { AnyAction } from \"@reduxjs/toolkit\";\n\n/**\n * You should not edit this file this is the function to dispatch actions to the store\n * outside of a react component\n */\ntype ForeignAction = (...args: any[]) => AnyAction;\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\nimport { wrapAction } from \"../onset\";\n\n// Here I create an action that takes no argument\nexport const notifySpeed = createAction(\"NOTIFY_SPEED\");\nexport const notifyDecompte = createAction(\"NOTIFY_DECOMPTE\");\nexport const notifyTime = createAction(\"NOTIFY_TIME\");\nexport const notifyPosition = createAction(\"NOTIFY_POSITION\");\nexport const playerFinished = createAction(\"PLAYER_FINISHED\");\nexport const passCheckpoint = createAction(\"PASS_CHECKPOINT\");\nexport const hideCheckpoint = createAction(\"HIDE_CHECKPOINT\");\nexport const clearFinishTime  = createAction(\"CLEAR_FINISH_TIME\");\n\n// I want this action to be available to Onset so I attach it globally\n(window as any).NotifySpeed = wrapAction(notifySpeed);\n(window as any).NotifyDecompte = wrapAction(notifyDecompte);\n(window as any).NotifyTime = wrapAction(notifyTime);\n(window as any).PlayerFinished = wrapAction(playerFinished);\n(window as any).PlayerPassedCheckpoint = wrapAction(passCheckpoint);\n(window as any).HideCheckPoint = wrapAction(hideCheckpoint);\n(window as any).ClearFinishTime = wrapAction(clearFinishTime);\n(window as any).NotifyPosition = wrapAction(notifyPosition);\n\n// Here I declare the state of my whole application\n// I only have one of course because this is only counting\nexport interface IAppState {\n    speed: number;\n    decompte: number;\n    time: number;\n    total: number;\n    position: number;\n    checkpointInfos: {\n        last?: number;\n        time?: number;\n        visible?: boolean;\n        all: {\n            id: number;\n            time: number;\n        }[]\n    },\n    win?: {\n        time: number;\n        pos: number;\n    }\n}\n\nconst initialState: IAppState = {\n    speed: 0,\n    decompte: -1,\n    time: 0,\n    total: 0,\n    position: 0,\n    checkpointInfos: {\n        all: []\n    }\n};\n\n// Here it is my reducer, his tasks is to merge the future state with\nexport const counterReducer = createReducer(initialState, {\n    [notifySpeed.type]: (state, action) => ({ ...state, \n        speed: Math.abs(Number.parseFloat(action.payload)),\n    }),\n    [notifyDecompte.type]: (state, action) => ({ ...state,\n        decompte: Number.parseInt(action.payload),\n        win: undefined\n    }),\n    [notifyTime.type]: (state, action) => ({ ...state,\n        time: Number.parseInt(action.payload)\n    }),\n    [notifyPosition.type]: (state, action) => {\n        const data = JSON.parse(action.payload);\n        return {...state,\n            position: data.pos,\n            total: data.total\n        }\n    },\n    [passCheckpoint.type]: (state, action) => {\n        const data = JSON.parse(action.payload);\n        return {...state,\n            checkpointInfos: {\n                last: data.nb,\n                time: state.time,\n                visible: true,\n                all: [...state.checkpointInfos.all, {\n                    id: data.nb,\n                    time: state.time\n                }]\n            },\n        }\n    },\n    [hideCheckpoint.type]: (state) => ({...state,\n        checkpointInfos: {\n            ...state.checkpointInfos,\n            visible: false\n        }\n    }),\n    [playerFinished.type]: (state, action) => {\n        const data = JSON.parse(action.payload);\n\n        return {...state,\n            speed: 0,\n            decompte: -1,\n            time: 0,\n            win: {\n                time: data.time,\n                pos: data.place\n            },\n            checkpointInfos: {\n                all: []\n            }\n        }\n    },\n    [clearFinishTime.type]: (state) => ({...state,\n        win: undefined,\n    })\n});\n","import { configureStore } from '@reduxjs/toolkit'\nimport { counterReducer } from \"./reducer\";\n\nexport const store = configureStore({ reducer: counterReducer });\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IAppState } from \"../redux/reducer\";\nimport \"./speedometer.css\"\n\nexport const Speedometer = () => {\n\n    const playerSpeed = useSelector((appState: IAppState) => appState.speed);\n    const rotationFromSpeed = playerSpeed <= 20\n        ? -140\n        : -140 + (playerSpeed - 20);\n\n    console.log(\"Player Speed : \", playerSpeed);\n\n    return (\n        <div className=\"gauge\">\n            <div className=\"needle\" style={{transform: `rotate(${rotationFromSpeed}deg)`}}>\n                <div className=\"needleBody\"></div>\n            </div>\n            <div className=\"textSpeed\">\n                {playerSpeed}\n            </div>\n        </div>\n    );\n\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IAppState } from \"../redux/reducer\";\nimport \"./decompte.css\"\n\nexport const Decompte = () => {\n    const decompteValue = useSelector((appState: IAppState) => appState.decompte);\n\n    return decompteValue !== -1 ? <div className=\"decompte\">\n        ({decompteValue})\n    </div> : null;\n}\n","import React from \"react\";\nimport { IAppState } from \"../redux/reducer\";\nimport { useSelector } from \"react-redux\";\nimport \"./counter.css\"\n\nconst format = (n: number): String => n < 10 ? `0${n}` : `${n}`;\n\nexport const Counter = () => {\n    const counterValue = useSelector((appState: IAppState) => appState.time)\n\n    console.log(\"Time : \", counterValue);\n\n    const seconds = counterValue / 1000;\n    const minutes = Math.floor(seconds / 60);\n    const secondsLeft = Math.floor(seconds % 60);\n    const msLeft = counterValue % 1000;\n\n    return counterValue !== 0 \n    ?   <div className=\"counterContainer\">\n            <div className=\"counterBox\">\n                {format(minutes)}:{format(secondsLeft)}:{msLeft}\n            </div>\n        </div>\n    : null;\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IAppState } from \"../redux/reducer\";\nimport \"./checkpoints.css\"\n\nexport const CheckpointPassed = () => {\n    const checkpointData = useSelector((appState: IAppState) => appState.checkpointInfos);\n\n    console.log(\"Checkpoints data : \", checkpointData);\n    const counterValue = checkpointData.time;\n    if (counterValue && checkpointData.visible) {\n        const seconds = counterValue / 1000;\n        const minutes = Math.floor(seconds / 60);\n        const secondsLeft = Math.floor(seconds % 60);\n        const msLeft = counterValue % 1000;\n            \n        return <div className=\"checkpointPassed\">\n            Checkpoint #{checkpointData.last} {minutes}:{secondsLeft}\n        </div>;\n    }\n    return null;\n}\n","import React from \"react\";\nimport { IAppState } from \"../redux/reducer\";\nimport { useSelector } from \"react-redux\";\nimport \"./win.css\";\n\nexport const Win = () => {\n    \n    const winData = useSelector((appState: IAppState) => appState.win)\n\n    console.log(\"Win Data : \", winData);\n\n    return winData ? <div className=\"winDisplay\">\n        ( FINISHED {winData.pos} )\n    </div> : null;\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IAppState } from \"../redux/reducer\";\nimport \"./position.css\"\n\nexport const Position = () => {\n\n    const {pos, total} = useSelector((appState: IAppState) => ({pos: appState.position, total: appState.total}));\n    \n    return <div className=\"position\">\n        {pos} / {total}\n    </div>\n}\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport {store} from \"./redux/store\";\nimport { Speedometer } from './Speed/Speedometer';\nimport { Decompte } from './Decompte/DecompteValue';\nimport { Counter } from './Counter/Counter';\nimport { CheckpointPassed } from './CheckPoints/CheckpointPassed';\nimport { Win } from './Win/Win';\nimport {Position} from \"./Position/Position\"\n\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Counter />\n      <CheckpointPassed />\n      <Decompte />\n      <Speedometer />\n      <Position />\n      <Win />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./onset\";\nimport \"./css/bulma.css\"\nimport \"./css/overrides.css\"\n\n// This is the react bootstrapping file, nothing interesting here :)\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}